// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_Login_FullMethodName                 = "/proto.UserService/Login"
	UserService_Register_FullMethodName              = "/proto.UserService/Register"
	UserService_CheckPreviousPassword_FullMethodName = "/proto.UserService/CheckPreviousPassword"
	UserService_ApplyNewPassword_FullMethodName      = "/proto.UserService/ApplyNewPassword"
	UserService_Setup2FA_FullMethodName              = "/proto.UserService/Setup2FA"
	UserService_Test2FA_FullMethodName               = "/proto.UserService/Test2FA"
	UserService_CancelSetup2FA_FullMethodName        = "/proto.UserService/CancelSetup2FA"
	UserService_Get2FAStatus_FullMethodName          = "/proto.UserService/Get2FAStatus"
	UserService_Disable2FA_FullMethodName            = "/proto.UserService/Disable2FA"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 定义用户登录 RPC 方法
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	// 定义用户注册 RPC 方法
	Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	// 验证旧密码
	CheckPreviousPassword(ctx context.Context, in *CheckPreviousPasswordRequest, opts ...grpc.CallOption) (*CheckPreviousPasswordResponse, error)
	// 更新用户密码
	ApplyNewPassword(ctx context.Context, in *ApplyNewPasswordRequest, opts ...grpc.CallOption) (*ApplyNewPasswordResponse, error)
	Setup2FA(ctx context.Context, in *Setup2FARequest, opts ...grpc.CallOption) (*Setup2FAResponse, error)
	Test2FA(ctx context.Context, in *Test2FARequest, opts ...grpc.CallOption) (*Test2FAResponse, error)
	CancelSetup2FA(ctx context.Context, in *CancelSetup2FARequest, opts ...grpc.CallOption) (*CancelSetup2FAResponse, error)
	Get2FAStatus(ctx context.Context, in *Get2FAStatusRequest, opts ...grpc.CallOption) (*Get2FAStatusResponse, error)
	Disable2FA(ctx context.Context, in *Disable2FARequest, opts ...grpc.CallOption) (*Disable2FAResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckPreviousPassword(ctx context.Context, in *CheckPreviousPasswordRequest, opts ...grpc.CallOption) (*CheckPreviousPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPreviousPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_CheckPreviousPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ApplyNewPassword(ctx context.Context, in *ApplyNewPasswordRequest, opts ...grpc.CallOption) (*ApplyNewPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyNewPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_ApplyNewPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Setup2FA(ctx context.Context, in *Setup2FARequest, opts ...grpc.CallOption) (*Setup2FAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Setup2FAResponse)
	err := c.cc.Invoke(ctx, UserService_Setup2FA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Test2FA(ctx context.Context, in *Test2FARequest, opts ...grpc.CallOption) (*Test2FAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Test2FAResponse)
	err := c.cc.Invoke(ctx, UserService_Test2FA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CancelSetup2FA(ctx context.Context, in *CancelSetup2FARequest, opts ...grpc.CallOption) (*CancelSetup2FAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelSetup2FAResponse)
	err := c.cc.Invoke(ctx, UserService_CancelSetup2FA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get2FAStatus(ctx context.Context, in *Get2FAStatusRequest, opts ...grpc.CallOption) (*Get2FAStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Get2FAStatusResponse)
	err := c.cc.Invoke(ctx, UserService_Get2FAStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Disable2FA(ctx context.Context, in *Disable2FARequest, opts ...grpc.CallOption) (*Disable2FAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Disable2FAResponse)
	err := c.cc.Invoke(ctx, UserService_Disable2FA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// 定义用户登录 RPC 方法
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	// 定义用户注册 RPC 方法
	Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	// 验证旧密码
	CheckPreviousPassword(context.Context, *CheckPreviousPasswordRequest) (*CheckPreviousPasswordResponse, error)
	// 更新用户密码
	ApplyNewPassword(context.Context, *ApplyNewPasswordRequest) (*ApplyNewPasswordResponse, error)
	Setup2FA(context.Context, *Setup2FARequest) (*Setup2FAResponse, error)
	Test2FA(context.Context, *Test2FARequest) (*Test2FAResponse, error)
	CancelSetup2FA(context.Context, *CancelSetup2FARequest) (*CancelSetup2FAResponse, error)
	Get2FAStatus(context.Context, *Get2FAStatusRequest) (*Get2FAStatusResponse, error)
	Disable2FA(context.Context, *Disable2FARequest) (*Disable2FAResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) CheckPreviousPassword(context.Context, *CheckPreviousPasswordRequest) (*CheckPreviousPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPreviousPassword not implemented")
}
func (UnimplementedUserServiceServer) ApplyNewPassword(context.Context, *ApplyNewPasswordRequest) (*ApplyNewPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyNewPassword not implemented")
}
func (UnimplementedUserServiceServer) Setup2FA(context.Context, *Setup2FARequest) (*Setup2FAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup2FA not implemented")
}
func (UnimplementedUserServiceServer) Test2FA(context.Context, *Test2FARequest) (*Test2FAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test2FA not implemented")
}
func (UnimplementedUserServiceServer) CancelSetup2FA(context.Context, *CancelSetup2FARequest) (*CancelSetup2FAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSetup2FA not implemented")
}
func (UnimplementedUserServiceServer) Get2FAStatus(context.Context, *Get2FAStatusRequest) (*Get2FAStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get2FAStatus not implemented")
}
func (UnimplementedUserServiceServer) Disable2FA(context.Context, *Disable2FARequest) (*Disable2FAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable2FA not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckPreviousPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPreviousPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckPreviousPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckPreviousPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckPreviousPassword(ctx, req.(*CheckPreviousPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ApplyNewPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyNewPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ApplyNewPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ApplyNewPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ApplyNewPassword(ctx, req.(*ApplyNewPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Setup2FA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setup2FARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Setup2FA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Setup2FA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Setup2FA(ctx, req.(*Setup2FARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Test2FA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test2FARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Test2FA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Test2FA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Test2FA(ctx, req.(*Test2FARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CancelSetup2FA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSetup2FARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CancelSetup2FA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CancelSetup2FA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CancelSetup2FA(ctx, req.(*CancelSetup2FARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Get2FAStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get2FAStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get2FAStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Get2FAStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get2FAStatus(ctx, req.(*Get2FAStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Disable2FA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Disable2FARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Disable2FA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Disable2FA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Disable2FA(ctx, req.(*Disable2FARequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "CheckPreviousPassword",
			Handler:    _UserService_CheckPreviousPassword_Handler,
		},
		{
			MethodName: "ApplyNewPassword",
			Handler:    _UserService_ApplyNewPassword_Handler,
		},
		{
			MethodName: "Setup2FA",
			Handler:    _UserService_Setup2FA_Handler,
		},
		{
			MethodName: "Test2FA",
			Handler:    _UserService_Test2FA_Handler,
		},
		{
			MethodName: "CancelSetup2FA",
			Handler:    _UserService_CancelSetup2FA_Handler,
		},
		{
			MethodName: "Get2FAStatus",
			Handler:    _UserService_Get2FAStatus_Handler,
		},
		{
			MethodName: "Disable2FA",
			Handler:    _UserService_Disable2FA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
