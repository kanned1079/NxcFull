// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: subscription.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubscriptionService_GetActivePlanListByUserId_FullMethodName = "/subscription.SubscriptionService/GetActivePlanListByUserId"
	SubscriptionService_CommitNewOrder_FullMethodName            = "/subscription.SubscriptionService/CommitNewOrder"
	SubscriptionService_GetOrders_FullMethodName                 = "/subscription.SubscriptionService/GetOrders"
	SubscriptionService_GetAllPlanKeyName_FullMethodName         = "/subscription.SubscriptionService/GetAllPlanKeyName"
	SubscriptionService_GetAllPlans_FullMethodName               = "/subscription.SubscriptionService/GetAllPlans"
	SubscriptionService_AddNewPlan_FullMethodName                = "/subscription.SubscriptionService/AddNewPlan"
	SubscriptionService_UpdatePlan_FullMethodName                = "/subscription.SubscriptionService/UpdatePlan"
	SubscriptionService_DeletePlan_FullMethodName                = "/subscription.SubscriptionService/DeletePlan"
	SubscriptionService_UpdatePlanIsSale_FullMethodName          = "/subscription.SubscriptionService/UpdatePlanIsSale"
	SubscriptionService_UpdatePlanRenew_FullMethodName           = "/subscription.SubscriptionService/UpdatePlanRenew"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	// 获取用户活动订阅计划
	GetActivePlanListByUserId(ctx context.Context, in *GetActivePlanListByUserIdRequest, opts ...grpc.CallOption) (*GetActivePlanListByUserIdResponse, error)
	// 提交新订单
	CommitNewOrder(ctx context.Context, in *CommitNewOrderRequest, opts ...grpc.CallOption) (*CommitNewOrderResponse, error)
	// 获取用户订单
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetAllPlanKeyName(ctx context.Context, in *GetAllPlanKeyNameRequest, opts ...grpc.CallOption) (*GetAllPlanKeyNameResponse, error)
	GetAllPlans(ctx context.Context, in *GetAllPlansRequest, opts ...grpc.CallOption) (*GetAllPlansResponse, error)
	AddNewPlan(ctx context.Context, in *AddNewPlanRequest, opts ...grpc.CallOption) (*AddNewPlanResponse, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error)
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error)
	UpdatePlanIsSale(ctx context.Context, in *UpdatePlanIsSaleRequest, opts ...grpc.CallOption) (*UpdatePlanIsSaleResponse, error)
	UpdatePlanRenew(ctx context.Context, in *UpdatePlanRenewRequest, opts ...grpc.CallOption) (*UpdatePlanRenewResponse, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) GetActivePlanListByUserId(ctx context.Context, in *GetActivePlanListByUserIdRequest, opts ...grpc.CallOption) (*GetActivePlanListByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivePlanListByUserIdResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_GetActivePlanListByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) CommitNewOrder(ctx context.Context, in *CommitNewOrderRequest, opts ...grpc.CallOption) (*CommitNewOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitNewOrderResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_CommitNewOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetAllPlanKeyName(ctx context.Context, in *GetAllPlanKeyNameRequest, opts ...grpc.CallOption) (*GetAllPlanKeyNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPlanKeyNameResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_GetAllPlanKeyName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetAllPlans(ctx context.Context, in *GetAllPlansRequest, opts ...grpc.CallOption) (*GetAllPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPlansResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_GetAllPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) AddNewPlan(ctx context.Context, in *AddNewPlanRequest, opts ...grpc.CallOption) (*AddNewPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNewPlanResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_AddNewPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlanResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_UpdatePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePlanResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_DeletePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) UpdatePlanIsSale(ctx context.Context, in *UpdatePlanIsSaleRequest, opts ...grpc.CallOption) (*UpdatePlanIsSaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlanIsSaleResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_UpdatePlanIsSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) UpdatePlanRenew(ctx context.Context, in *UpdatePlanRenewRequest, opts ...grpc.CallOption) (*UpdatePlanRenewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlanRenewResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_UpdatePlanRenew_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility.
type SubscriptionServiceServer interface {
	// 获取用户活动订阅计划
	GetActivePlanListByUserId(context.Context, *GetActivePlanListByUserIdRequest) (*GetActivePlanListByUserIdResponse, error)
	// 提交新订单
	CommitNewOrder(context.Context, *CommitNewOrderRequest) (*CommitNewOrderResponse, error)
	// 获取用户订单
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	GetAllPlanKeyName(context.Context, *GetAllPlanKeyNameRequest) (*GetAllPlanKeyNameResponse, error)
	GetAllPlans(context.Context, *GetAllPlansRequest) (*GetAllPlansResponse, error)
	AddNewPlan(context.Context, *AddNewPlanRequest) (*AddNewPlanResponse, error)
	UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error)
	DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error)
	UpdatePlanIsSale(context.Context, *UpdatePlanIsSaleRequest) (*UpdatePlanIsSaleResponse, error)
	UpdatePlanRenew(context.Context, *UpdatePlanRenewRequest) (*UpdatePlanRenewResponse, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionServiceServer struct{}

func (UnimplementedSubscriptionServiceServer) GetActivePlanListByUserId(context.Context, *GetActivePlanListByUserIdRequest) (*GetActivePlanListByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePlanListByUserId not implemented")
}
func (UnimplementedSubscriptionServiceServer) CommitNewOrder(context.Context, *CommitNewOrderRequest) (*CommitNewOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitNewOrder not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetAllPlanKeyName(context.Context, *GetAllPlanKeyNameRequest) (*GetAllPlanKeyNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPlanKeyName not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetAllPlans(context.Context, *GetAllPlansRequest) (*GetAllPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPlans not implemented")
}
func (UnimplementedSubscriptionServiceServer) AddNewPlan(context.Context, *AddNewPlanRequest) (*AddNewPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) UpdatePlanIsSale(context.Context, *UpdatePlanIsSaleRequest) (*UpdatePlanIsSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanIsSale not implemented")
}
func (UnimplementedSubscriptionServiceServer) UpdatePlanRenew(context.Context, *UpdatePlanRenewRequest) (*UpdatePlanRenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanRenew not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}
func (UnimplementedSubscriptionServiceServer) testEmbeddedByValue()                             {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_GetActivePlanListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivePlanListByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetActivePlanListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_GetActivePlanListByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetActivePlanListByUserId(ctx, req.(*GetActivePlanListByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_CommitNewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitNewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).CommitNewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_CommitNewOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).CommitNewOrder(ctx, req.(*CommitNewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetAllPlanKeyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPlanKeyNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetAllPlanKeyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_GetAllPlanKeyName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetAllPlanKeyName(ctx, req.(*GetAllPlanKeyNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetAllPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetAllPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_GetAllPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetAllPlans(ctx, req.(*GetAllPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_AddNewPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).AddNewPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_AddNewPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).AddNewPlan(ctx, req.(*AddNewPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_UpdatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_DeletePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).DeletePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_DeletePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).DeletePlan(ctx, req.(*DeletePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_UpdatePlanIsSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanIsSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).UpdatePlanIsSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_UpdatePlanIsSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).UpdatePlanIsSale(ctx, req.(*UpdatePlanIsSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_UpdatePlanRenew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).UpdatePlanRenew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_UpdatePlanRenew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).UpdatePlanRenew(ctx, req.(*UpdatePlanRenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActivePlanListByUserId",
			Handler:    _SubscriptionService_GetActivePlanListByUserId_Handler,
		},
		{
			MethodName: "CommitNewOrder",
			Handler:    _SubscriptionService_CommitNewOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _SubscriptionService_GetOrders_Handler,
		},
		{
			MethodName: "GetAllPlanKeyName",
			Handler:    _SubscriptionService_GetAllPlanKeyName_Handler,
		},
		{
			MethodName: "GetAllPlans",
			Handler:    _SubscriptionService_GetAllPlans_Handler,
		},
		{
			MethodName: "AddNewPlan",
			Handler:    _SubscriptionService_AddNewPlan_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _SubscriptionService_UpdatePlan_Handler,
		},
		{
			MethodName: "DeletePlan",
			Handler:    _SubscriptionService_DeletePlan_Handler,
		},
		{
			MethodName: "UpdatePlanIsSale",
			Handler:    _SubscriptionService_UpdatePlanIsSale_Handler,
		},
		{
			MethodName: "UpdatePlanRenew",
			Handler:    _SubscriptionService_UpdatePlanRenew_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription.proto",
}
