// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: settings.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SettingsService_UpdateSingleOption_FullMethodName = "/settings.SettingsService/UpdateSingleOption"
	SettingsService_GetStartTheme_FullMethodName      = "/settings.SettingsService/GetStartTheme"
	SettingsService_GetSystemSettings_FullMethodName  = "/settings.SettingsService/GetSystemSettings"
)

// SettingsServiceClient is the client API for SettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义 SettingsService 服务
type SettingsServiceClient interface {
	// 更新单个设置项
	UpdateSingleOption(ctx context.Context, in *UpdateSingleOptionRequest, opts ...grpc.CallOption) (*UpdateSingleOptionResponse, error)
	// 获取启动页面主题设置
	GetStartTheme(ctx context.Context, in *GetStartThemeRequest, opts ...grpc.CallOption) (*GetStartThemeResponse, error)
	// 获取所有的设置
	GetSystemSettings(ctx context.Context, in *GetSystemSettingsRequest, opts ...grpc.CallOption) (*GetSystemSettingsResponse, error)
}

type settingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsServiceClient(cc grpc.ClientConnInterface) SettingsServiceClient {
	return &settingsServiceClient{cc}
}

func (c *settingsServiceClient) UpdateSingleOption(ctx context.Context, in *UpdateSingleOptionRequest, opts ...grpc.CallOption) (*UpdateSingleOptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSingleOptionResponse)
	err := c.cc.Invoke(ctx, SettingsService_UpdateSingleOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetStartTheme(ctx context.Context, in *GetStartThemeRequest, opts ...grpc.CallOption) (*GetStartThemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStartThemeResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetStartTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetSystemSettings(ctx context.Context, in *GetSystemSettingsRequest, opts ...grpc.CallOption) (*GetSystemSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemSettingsResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetSystemSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServiceServer is the server API for SettingsService service.
// All implementations must embed UnimplementedSettingsServiceServer
// for forward compatibility.
//
// 定义 SettingsService 服务
type SettingsServiceServer interface {
	// 更新单个设置项
	UpdateSingleOption(context.Context, *UpdateSingleOptionRequest) (*UpdateSingleOptionResponse, error)
	// 获取启动页面主题设置
	GetStartTheme(context.Context, *GetStartThemeRequest) (*GetStartThemeResponse, error)
	// 获取所有的设置
	GetSystemSettings(context.Context, *GetSystemSettingsRequest) (*GetSystemSettingsResponse, error)
	mustEmbedUnimplementedSettingsServiceServer()
}

// UnimplementedSettingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSettingsServiceServer struct{}

func (UnimplementedSettingsServiceServer) UpdateSingleOption(context.Context, *UpdateSingleOptionRequest) (*UpdateSingleOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSingleOption not implemented")
}
func (UnimplementedSettingsServiceServer) GetStartTheme(context.Context, *GetStartThemeRequest) (*GetStartThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStartTheme not implemented")
}
func (UnimplementedSettingsServiceServer) GetSystemSettings(context.Context, *GetSystemSettingsRequest) (*GetSystemSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemSettings not implemented")
}
func (UnimplementedSettingsServiceServer) mustEmbedUnimplementedSettingsServiceServer() {}
func (UnimplementedSettingsServiceServer) testEmbeddedByValue()                         {}

// UnsafeSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServiceServer will
// result in compilation errors.
type UnsafeSettingsServiceServer interface {
	mustEmbedUnimplementedSettingsServiceServer()
}

func RegisterSettingsServiceServer(s grpc.ServiceRegistrar, srv SettingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SettingsService_ServiceDesc, srv)
}

func _SettingsService_UpdateSingleOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSingleOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).UpdateSingleOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_UpdateSingleOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).UpdateSingleOption(ctx, req.(*UpdateSingleOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetStartTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStartThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetStartTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetStartTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetStartTheme(ctx, req.(*GetStartThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetSystemSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetSystemSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetSystemSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetSystemSettings(ctx, req.(*GetSystemSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettingsService_ServiceDesc is the grpc.ServiceDesc for SettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settings.SettingsService",
	HandlerType: (*SettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSingleOption",
			Handler:    _SettingsService_UpdateSingleOption_Handler,
		},
		{
			MethodName: "GetStartTheme",
			Handler:    _SettingsService_GetStartTheme_Handler,
		},
		{
			MethodName: "GetSystemSettings",
			Handler:    _SettingsService_GetSystemSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settings.proto",
}
