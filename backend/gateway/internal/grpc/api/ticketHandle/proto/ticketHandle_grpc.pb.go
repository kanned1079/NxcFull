// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: ticketHandle.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketHandleService_GetUserTicketsByUserId_FullMethodName = "/ticketHandle.TicketHandleService/GetUserTicketsByUserId"
	TicketHandleService_CloseTicketByTicketId_FullMethodName  = "/ticketHandle.TicketHandleService/CloseTicketByTicketId"
	TicketHandleService_GetChatContent_FullMethodName         = "/ticketHandle.TicketHandleService/GetChatContent"
	TicketHandleService_GetAllTicket_FullMethodName           = "/ticketHandle.TicketHandleService/GetAllTicket"
)

// TicketHandleServiceClient is the client API for TicketHandleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketHandleServiceClient interface {
	// 查询用户提交的所有工单列表 用户的请求
	GetUserTicketsByUserId(ctx context.Context, in *GetUserTicketsByUserIdRequest, opts ...grpc.CallOption) (*GetUserTicketsByUserIdResponse, error)
	// 关闭对应id的工单 用户和管理员都可请求
	CloseTicketByTicketId(ctx context.Context, in *CloseTicketByTicketIdRequest, opts ...grpc.CallOption) (*CloseTicketByTicketIdResponse, error)
	// 拉取最新的对话记录 用户和管理员都可请求
	GetChatContent(ctx context.Context, in *GetChatContentRequest, opts ...grpc.CallOption) (*GetChatContentResponse, error)
	// 获取所有工单 分为活跃的和所有工单 管理员的请求
	GetAllTicket(ctx context.Context, in *GetAllTicketRequest, opts ...grpc.CallOption) (*GetAllTicketResponse, error)
}

type ticketHandleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketHandleServiceClient(cc grpc.ClientConnInterface) TicketHandleServiceClient {
	return &ticketHandleServiceClient{cc}
}

func (c *ticketHandleServiceClient) GetUserTicketsByUserId(ctx context.Context, in *GetUserTicketsByUserIdRequest, opts ...grpc.CallOption) (*GetUserTicketsByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTicketsByUserIdResponse)
	err := c.cc.Invoke(ctx, TicketHandleService_GetUserTicketsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketHandleServiceClient) CloseTicketByTicketId(ctx context.Context, in *CloseTicketByTicketIdRequest, opts ...grpc.CallOption) (*CloseTicketByTicketIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseTicketByTicketIdResponse)
	err := c.cc.Invoke(ctx, TicketHandleService_CloseTicketByTicketId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketHandleServiceClient) GetChatContent(ctx context.Context, in *GetChatContentRequest, opts ...grpc.CallOption) (*GetChatContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatContentResponse)
	err := c.cc.Invoke(ctx, TicketHandleService_GetChatContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketHandleServiceClient) GetAllTicket(ctx context.Context, in *GetAllTicketRequest, opts ...grpc.CallOption) (*GetAllTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTicketResponse)
	err := c.cc.Invoke(ctx, TicketHandleService_GetAllTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketHandleServiceServer is the server API for TicketHandleService service.
// All implementations must embed UnimplementedTicketHandleServiceServer
// for forward compatibility.
type TicketHandleServiceServer interface {
	// 查询用户提交的所有工单列表 用户的请求
	GetUserTicketsByUserId(context.Context, *GetUserTicketsByUserIdRequest) (*GetUserTicketsByUserIdResponse, error)
	// 关闭对应id的工单 用户和管理员都可请求
	CloseTicketByTicketId(context.Context, *CloseTicketByTicketIdRequest) (*CloseTicketByTicketIdResponse, error)
	// 拉取最新的对话记录 用户和管理员都可请求
	GetChatContent(context.Context, *GetChatContentRequest) (*GetChatContentResponse, error)
	// 获取所有工单 分为活跃的和所有工单 管理员的请求
	GetAllTicket(context.Context, *GetAllTicketRequest) (*GetAllTicketResponse, error)
	mustEmbedUnimplementedTicketHandleServiceServer()
}

// UnimplementedTicketHandleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketHandleServiceServer struct{}

func (UnimplementedTicketHandleServiceServer) GetUserTicketsByUserId(context.Context, *GetUserTicketsByUserIdRequest) (*GetUserTicketsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTicketsByUserId not implemented")
}
func (UnimplementedTicketHandleServiceServer) CloseTicketByTicketId(context.Context, *CloseTicketByTicketIdRequest) (*CloseTicketByTicketIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicketByTicketId not implemented")
}
func (UnimplementedTicketHandleServiceServer) GetChatContent(context.Context, *GetChatContentRequest) (*GetChatContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatContent not implemented")
}
func (UnimplementedTicketHandleServiceServer) GetAllTicket(context.Context, *GetAllTicketRequest) (*GetAllTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTicket not implemented")
}
func (UnimplementedTicketHandleServiceServer) mustEmbedUnimplementedTicketHandleServiceServer() {}
func (UnimplementedTicketHandleServiceServer) testEmbeddedByValue()                             {}

// UnsafeTicketHandleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketHandleServiceServer will
// result in compilation errors.
type UnsafeTicketHandleServiceServer interface {
	mustEmbedUnimplementedTicketHandleServiceServer()
}

func RegisterTicketHandleServiceServer(s grpc.ServiceRegistrar, srv TicketHandleServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicketHandleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketHandleService_ServiceDesc, srv)
}

func _TicketHandleService_GetUserTicketsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTicketsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketHandleServiceServer).GetUserTicketsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketHandleService_GetUserTicketsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketHandleServiceServer).GetUserTicketsByUserId(ctx, req.(*GetUserTicketsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketHandleService_CloseTicketByTicketId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketByTicketIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketHandleServiceServer).CloseTicketByTicketId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketHandleService_CloseTicketByTicketId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketHandleServiceServer).CloseTicketByTicketId(ctx, req.(*CloseTicketByTicketIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketHandleService_GetChatContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketHandleServiceServer).GetChatContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketHandleService_GetChatContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketHandleServiceServer).GetChatContent(ctx, req.(*GetChatContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketHandleService_GetAllTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketHandleServiceServer).GetAllTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketHandleService_GetAllTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketHandleServiceServer).GetAllTicket(ctx, req.(*GetAllTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketHandleService_ServiceDesc is the grpc.ServiceDesc for TicketHandleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketHandleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketHandle.TicketHandleService",
	HandlerType: (*TicketHandleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserTicketsByUserId",
			Handler:    _TicketHandleService_GetUserTicketsByUserId_Handler,
		},
		{
			MethodName: "CloseTicketByTicketId",
			Handler:    _TicketHandleService_CloseTicketByTicketId_Handler,
		},
		{
			MethodName: "GetChatContent",
			Handler:    _TicketHandleService_GetChatContent_Handler,
		},
		{
			MethodName: "GetAllTicket",
			Handler:    _TicketHandleService_GetAllTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketHandle.proto",
}
