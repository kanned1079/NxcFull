// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: key.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAllMyKeysByUserIdAscRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page   int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size   int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetAllMyKeysByUserIdAscRequest) Reset() {
	*x = GetAllMyKeysByUserIdAscRequest{}
	mi := &file_key_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllMyKeysByUserIdAscRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMyKeysByUserIdAscRequest) ProtoMessage() {}

func (x *GetAllMyKeysByUserIdAscRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMyKeysByUserIdAscRequest.ProtoReflect.Descriptor instead.
func (*GetAllMyKeysByUserIdAscRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllMyKeysByUserIdAscRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAllMyKeysByUserIdAscRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllMyKeysByUserIdAscRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetAllMyKeysByUserIdAscResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PageCount int64  `protobuf:"varint,3,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
	Keys      []byte `protobuf:"bytes,4,opt,name=keys,proto3" json:"keys,omitempty"`
}

func (x *GetAllMyKeysByUserIdAscResponse) Reset() {
	*x = GetAllMyKeysByUserIdAscResponse{}
	mi := &file_key_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllMyKeysByUserIdAscResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMyKeysByUserIdAscResponse) ProtoMessage() {}

func (x *GetAllMyKeysByUserIdAscResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMyKeysByUserIdAscResponse.ProtoReflect.Descriptor instead.
func (*GetAllMyKeysByUserIdAscResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{1}
}

func (x *GetAllMyKeysByUserIdAscResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllMyKeysByUserIdAscResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAllMyKeysByUserIdAscResponse) GetPageCount() int64 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *GetAllMyKeysByUserIdAscResponse) GetKeys() []byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type GetKeyInfoByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetKeyInfoByIdRequest) Reset() {
	*x = GetKeyInfoByIdRequest{}
	mi := &file_key_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyInfoByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyInfoByIdRequest) ProtoMessage() {}

func (x *GetKeyInfoByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyInfoByIdRequest.ProtoReflect.Descriptor instead.
func (*GetKeyInfoByIdRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{2}
}

func (x *GetKeyInfoByIdRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

type GetKeyInfoByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Details []byte `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *GetKeyInfoByIdResponse) Reset() {
	*x = GetKeyInfoByIdResponse{}
	mi := &file_key_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyInfoByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyInfoByIdResponse) ProtoMessage() {}

func (x *GetKeyInfoByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyInfoByIdResponse.ProtoReflect.Descriptor instead.
func (*GetKeyInfoByIdResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{3}
}

func (x *GetKeyInfoByIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetKeyInfoByIdResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetKeyInfoByIdResponse) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

type RegisterClientWithKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Key      string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RegisterClientWithKeyRequest) Reset() {
	*x = RegisterClientWithKeyRequest{}
	mi := &file_key_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterClientWithKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClientWithKeyRequest) ProtoMessage() {}

func (x *RegisterClientWithKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClientWithKeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterClientWithKeyRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterClientWithKeyRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterClientWithKeyRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterClientWithKeyRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RegisterClientWithKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RegisterClientWithKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg            string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RegisterResult []byte `protobuf:"bytes,3,opt,name=register_result,json=registerResult,proto3" json:"register_result,omitempty"`
}

func (x *RegisterClientWithKeyResponse) Reset() {
	*x = RegisterClientWithKeyResponse{}
	mi := &file_key_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterClientWithKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClientWithKeyResponse) ProtoMessage() {}

func (x *RegisterClientWithKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClientWithKeyResponse.ProtoReflect.Descriptor instead.
func (*RegisterClientWithKeyResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterClientWithKeyResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RegisterClientWithKeyResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RegisterClientWithKeyResponse) GetRegisterResult() []byte {
	if x != nil {
		return x.RegisterResult
	}
	return nil
}

type CancelRegisterClientWithKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelRegisterClientWithKeyRequest) Reset() {
	*x = CancelRegisterClientWithKeyRequest{}
	mi := &file_key_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelRegisterClientWithKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRegisterClientWithKeyRequest) ProtoMessage() {}

func (x *CancelRegisterClientWithKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRegisterClientWithKeyRequest.ProtoReflect.Descriptor instead.
func (*CancelRegisterClientWithKeyRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{6}
}

type CancelRegisterClientWithKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelRegisterClientWithKeyResponse) Reset() {
	*x = CancelRegisterClientWithKeyResponse{}
	mi := &file_key_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelRegisterClientWithKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRegisterClientWithKeyResponse) ProtoMessage() {}

func (x *CancelRegisterClientWithKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRegisterClientWithKeyResponse.ProtoReflect.Descriptor instead.
func (*CancelRegisterClientWithKeyResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{7}
}

type BindOrActiveMyKey2AppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email         string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`                                      // 用户邮箱
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`                                // 密码
	Key           string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`                                          // 密钥key
	RequestAt     int64  `protobuf:"varint,4,opt,name=request_at,json=requestAt,proto3" json:"request_at,omitempty"`            // 时间戳
	ClientVersion string `protobuf:"bytes,5,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"` // 客户端版本
	ClientId      string `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	OsType        string `protobuf:"bytes,7,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"` // 操作系统类型
	Remark        string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *BindOrActiveMyKey2AppRequest) Reset() {
	*x = BindOrActiveMyKey2AppRequest{}
	mi := &file_key_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindOrActiveMyKey2AppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindOrActiveMyKey2AppRequest) ProtoMessage() {}

func (x *BindOrActiveMyKey2AppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindOrActiveMyKey2AppRequest.ProtoReflect.Descriptor instead.
func (*BindOrActiveMyKey2AppRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{8}
}

func (x *BindOrActiveMyKey2AppRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BindOrActiveMyKey2AppRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BindOrActiveMyKey2AppRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BindOrActiveMyKey2AppRequest) GetRequestAt() int64 {
	if x != nil {
		return x.RequestAt
	}
	return 0
}

func (x *BindOrActiveMyKey2AppRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *BindOrActiveMyKey2AppRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *BindOrActiveMyKey2AppRequest) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *BindOrActiveMyKey2AppRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type BindOrActiveMyKey2AppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code              int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg               string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	SignificantNumber string `protobuf:"bytes,3,opt,name=significant_number,json=significantNumber,proto3" json:"significant_number,omitempty"`
}

func (x *BindOrActiveMyKey2AppResponse) Reset() {
	*x = BindOrActiveMyKey2AppResponse{}
	mi := &file_key_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindOrActiveMyKey2AppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindOrActiveMyKey2AppResponse) ProtoMessage() {}

func (x *BindOrActiveMyKey2AppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindOrActiveMyKey2AppResponse.ProtoReflect.Descriptor instead.
func (*BindOrActiveMyKey2AppResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{9}
}

func (x *BindOrActiveMyKey2AppResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BindOrActiveMyKey2AppResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BindOrActiveMyKey2AppResponse) GetSignificantNumber() string {
	if x != nil {
		return x.SignificantNumber
	}
	return ""
}

type UnbindKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecordId int64 `protobuf:"varint,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (x *UnbindKeyRequest) Reset() {
	*x = UnbindKeyRequest{}
	mi := &file_key_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnbindKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindKeyRequest) ProtoMessage() {}

func (x *UnbindKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindKeyRequest.ProtoReflect.Descriptor instead.
func (*UnbindKeyRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{10}
}

func (x *UnbindKeyRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UnbindKeyRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

type UnbindKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Finished bool   `protobuf:"varint,3,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *UnbindKeyResponse) Reset() {
	*x = UnbindKeyResponse{}
	mi := &file_key_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnbindKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindKeyResponse) ProtoMessage() {}

func (x *UnbindKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindKeyResponse.ProtoReflect.Descriptor instead.
func (*UnbindKeyResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{11}
}

func (x *UnbindKeyResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UnbindKeyResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UnbindKeyResponse) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type CheckAccountAndKeyUsabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"` // 用户邮箱
	Key   string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`     // 密钥key
}

func (x *CheckAccountAndKeyUsabilityRequest) Reset() {
	*x = CheckAccountAndKeyUsabilityRequest{}
	mi := &file_key_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAccountAndKeyUsabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccountAndKeyUsabilityRequest) ProtoMessage() {}

func (x *CheckAccountAndKeyUsabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccountAndKeyUsabilityRequest.ProtoReflect.Descriptor instead.
func (*CheckAccountAndKeyUsabilityRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{12}
}

func (x *CheckAccountAndKeyUsabilityRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CheckAccountAndKeyUsabilityRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type CheckAccountAndKeyUsabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Passed bool   `protobuf:"varint,3,opt,name=passed,proto3" json:"passed,omitempty"`
}

func (x *CheckAccountAndKeyUsabilityResponse) Reset() {
	*x = CheckAccountAndKeyUsabilityResponse{}
	mi := &file_key_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAccountAndKeyUsabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccountAndKeyUsabilityResponse) ProtoMessage() {}

func (x *CheckAccountAndKeyUsabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccountAndKeyUsabilityResponse.ProtoReflect.Descriptor instead.
func (*CheckAccountAndKeyUsabilityResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{13}
}

func (x *CheckAccountAndKeyUsabilityResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckAccountAndKeyUsabilityResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckAccountAndKeyUsabilityResponse) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

type GetActivateLogByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page   int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size   int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetActivateLogByUserIdRequest) Reset() {
	*x = GetActivateLogByUserIdRequest{}
	mi := &file_key_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActivateLogByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivateLogByUserIdRequest) ProtoMessage() {}

func (x *GetActivateLogByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivateLogByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetActivateLogByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{14}
}

func (x *GetActivateLogByUserIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetActivateLogByUserIdRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetActivateLogByUserIdRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetActivateLogByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Log       []byte `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	PageCount int64  `protobuf:"varint,4,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
}

func (x *GetActivateLogByUserIdResponse) Reset() {
	*x = GetActivateLogByUserIdResponse{}
	mi := &file_key_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActivateLogByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivateLogByUserIdResponse) ProtoMessage() {}

func (x *GetActivateLogByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivateLogByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetActivateLogByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{15}
}

func (x *GetActivateLogByUserIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetActivateLogByUserIdResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetActivateLogByUserIdResponse) GetLog() []byte {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *GetActivateLogByUserIdResponse) GetPageCount() int64 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

type GetActivateLogByAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetActivateLogByAdminRequest) Reset() {
	*x = GetActivateLogByAdminRequest{}
	mi := &file_key_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActivateLogByAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivateLogByAdminRequest) ProtoMessage() {}

func (x *GetActivateLogByAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivateLogByAdminRequest.ProtoReflect.Descriptor instead.
func (*GetActivateLogByAdminRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{16}
}

func (x *GetActivateLogByAdminRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetActivateLogByAdminRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetActivateLogByAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Log       []byte `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	PageCount int64  `protobuf:"varint,4,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
}

func (x *GetActivateLogByAdminResponse) Reset() {
	*x = GetActivateLogByAdminResponse{}
	mi := &file_key_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActivateLogByAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivateLogByAdminResponse) ProtoMessage() {}

func (x *GetActivateLogByAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivateLogByAdminResponse.ProtoReflect.Descriptor instead.
func (*GetActivateLogByAdminResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{17}
}

func (x *GetActivateLogByAdminResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetActivateLogByAdminResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetActivateLogByAdminResponse) GetLog() []byte {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *GetActivateLogByAdminResponse) GetPageCount() int64 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

type AlterKeyBindRemarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecordId int64  `protobuf:"varint,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Remark   string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *AlterKeyBindRemarkRequest) Reset() {
	*x = AlterKeyBindRemarkRequest{}
	mi := &file_key_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterKeyBindRemarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterKeyBindRemarkRequest) ProtoMessage() {}

func (x *AlterKeyBindRemarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterKeyBindRemarkRequest.ProtoReflect.Descriptor instead.
func (*AlterKeyBindRemarkRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{18}
}

func (x *AlterKeyBindRemarkRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AlterKeyBindRemarkRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *AlterKeyBindRemarkRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type AlterKeyBindRemarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *AlterKeyBindRemarkResponse) Reset() {
	*x = AlterKeyBindRemarkResponse{}
	mi := &file_key_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterKeyBindRemarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterKeyBindRemarkResponse) ProtoMessage() {}

func (x *AlterKeyBindRemarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterKeyBindRemarkResponse.ProtoReflect.Descriptor instead.
func (*AlterKeyBindRemarkResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{19}
}

func (x *AlterKeyBindRemarkResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AlterKeyBindRemarkResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetAllKeysByAdminDescRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetAllKeysByAdminDescRequest) Reset() {
	*x = GetAllKeysByAdminDescRequest{}
	mi := &file_key_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllKeysByAdminDescRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKeysByAdminDescRequest) ProtoMessage() {}

func (x *GetAllKeysByAdminDescRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKeysByAdminDescRequest.ProtoReflect.Descriptor instead.
func (*GetAllKeysByAdminDescRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{20}
}

func (x *GetAllKeysByAdminDescRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllKeysByAdminDescRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetAllKeysByAdminDescRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetAllKeysByAdminDescResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Keys      []byte `protobuf:"bytes,3,opt,name=keys,proto3" json:"keys,omitempty"`
	PageCount int64  `protobuf:"varint,4,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
}

func (x *GetAllKeysByAdminDescResponse) Reset() {
	*x = GetAllKeysByAdminDescResponse{}
	mi := &file_key_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllKeysByAdminDescResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKeysByAdminDescResponse) ProtoMessage() {}

func (x *GetAllKeysByAdminDescResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKeysByAdminDescResponse.ProtoReflect.Descriptor instead.
func (*GetAllKeysByAdminDescResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{21}
}

func (x *GetAllKeysByAdminDescResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllKeysByAdminDescResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAllKeysByAdminDescResponse) GetKeys() []byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *GetAllKeysByAdminDescResponse) GetPageCount() int64 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

type AlterKeyValidInfoByAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId    int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	RecordId int64 `protobuf:"varint,3,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (x *AlterKeyValidInfoByAdminRequest) Reset() {
	*x = AlterKeyValidInfoByAdminRequest{}
	mi := &file_key_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterKeyValidInfoByAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterKeyValidInfoByAdminRequest) ProtoMessage() {}

func (x *AlterKeyValidInfoByAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterKeyValidInfoByAdminRequest.ProtoReflect.Descriptor instead.
func (*AlterKeyValidInfoByAdminRequest) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{22}
}

func (x *AlterKeyValidInfoByAdminRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AlterKeyValidInfoByAdminRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *AlterKeyValidInfoByAdminRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

type AlterKeyValidInfoByAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *AlterKeyValidInfoByAdminResponse) Reset() {
	*x = AlterKeyValidInfoByAdminResponse{}
	mi := &file_key_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterKeyValidInfoByAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterKeyValidInfoByAdminResponse) ProtoMessage() {}

func (x *AlterKeyValidInfoByAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterKeyValidInfoByAdminResponse.ProtoReflect.Descriptor instead.
func (*AlterKeyValidInfoByAdminResponse) Descriptor() ([]byte, []int) {
	return file_key_proto_rawDescGZIP(), []int{23}
}

func (x *AlterKeyValidInfoByAdminResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AlterKeyValidInfoByAdminResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_key_proto protoreflect.FileDescriptor

var file_key_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x61, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x79, 0x4b, 0x65, 0x79, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x73, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x7a, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x79, 0x4b,
	0x65, 0x79, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x73, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22,
	0x2e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7f, 0x0a, 0x1c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x6e, 0x0a, 0x1d, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x25, 0x0a, 0x23, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x1c, 0x42, 0x69, 0x6e, 0x64,
	0x4f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x79, 0x4b, 0x65, 0x79, 0x32, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0x74, 0x0a, 0x1d, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x79, 0x4b, 0x65, 0x79, 0x32, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x10, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x22, 0x55, 0x0a, 0x11, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x4c, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x63, 0x0a, 0x23, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x22, 0x60, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x77, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x76, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x42,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x69, 0x0a, 0x19, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0x42, 0x0a, 0x1a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x65,
	0x79, 0x73, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x78, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73,
	0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x1f,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x20,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0x80, 0x09, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d,
	0x79, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x73, 0x63,
	0x12, 0x23, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x79, 0x4b,
	0x65, 0x79, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x73, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4d, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x41, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e,
	0x6b, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b, 0x65, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12,
	0x21, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x42, 0x69, 0x6e, 0x64,
	0x4f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x79, 0x4b, 0x65, 0x79, 0x32, 0x41, 0x70,
	0x70, 0x12, 0x21, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x79, 0x4b, 0x65, 0x79, 0x32, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4f,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x79, 0x4b, 0x65, 0x79, 0x32, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x55, 0x6e, 0x62, 0x69,
	0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x55, 0x6e, 0x62, 0x69,
	0x6e, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6b,
	0x65, 0x79, 0x2e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x2e, 0x6b, 0x65, 0x79,
	0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x65, 0x79,
	0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4b, 0x65,
	0x79, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x27, 0x2e, 0x6b, 0x65, 0x79,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x65,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x6b, 0x65, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b,
	0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x18, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x6b,
	0x65, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x21, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b,
	0x65, 0x79, 0x73, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_key_proto_rawDescOnce sync.Once
	file_key_proto_rawDescData = file_key_proto_rawDesc
)

func file_key_proto_rawDescGZIP() []byte {
	file_key_proto_rawDescOnce.Do(func() {
		file_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_key_proto_rawDescData)
	})
	return file_key_proto_rawDescData
}

var file_key_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_key_proto_goTypes = []any{
	(*GetAllMyKeysByUserIdAscRequest)(nil),      // 0: key.GetAllMyKeysByUserIdAscRequest
	(*GetAllMyKeysByUserIdAscResponse)(nil),     // 1: key.GetAllMyKeysByUserIdAscResponse
	(*GetKeyInfoByIdRequest)(nil),               // 2: key.GetKeyInfoByIdRequest
	(*GetKeyInfoByIdResponse)(nil),              // 3: key.GetKeyInfoByIdResponse
	(*RegisterClientWithKeyRequest)(nil),        // 4: key.RegisterClientWithKeyRequest
	(*RegisterClientWithKeyResponse)(nil),       // 5: key.RegisterClientWithKeyResponse
	(*CancelRegisterClientWithKeyRequest)(nil),  // 6: key.CancelRegisterClientWithKeyRequest
	(*CancelRegisterClientWithKeyResponse)(nil), // 7: key.CancelRegisterClientWithKeyResponse
	(*BindOrActiveMyKey2AppRequest)(nil),        // 8: key.BindOrActiveMyKey2AppRequest
	(*BindOrActiveMyKey2AppResponse)(nil),       // 9: key.BindOrActiveMyKey2AppResponse
	(*UnbindKeyRequest)(nil),                    // 10: key.UnbindKeyRequest
	(*UnbindKeyResponse)(nil),                   // 11: key.UnbindKeyResponse
	(*CheckAccountAndKeyUsabilityRequest)(nil),  // 12: key.CheckAccountAndKeyUsabilityRequest
	(*CheckAccountAndKeyUsabilityResponse)(nil), // 13: key.CheckAccountAndKeyUsabilityResponse
	(*GetActivateLogByUserIdRequest)(nil),       // 14: key.GetActivateLogByUserIdRequest
	(*GetActivateLogByUserIdResponse)(nil),      // 15: key.GetActivateLogByUserIdResponse
	(*GetActivateLogByAdminRequest)(nil),        // 16: key.GetActivateLogByAdminRequest
	(*GetActivateLogByAdminResponse)(nil),       // 17: key.GetActivateLogByAdminResponse
	(*AlterKeyBindRemarkRequest)(nil),           // 18: key.AlterKeyBindRemarkRequest
	(*AlterKeyBindRemarkResponse)(nil),          // 19: key.AlterKeyBindRemarkResponse
	(*GetAllKeysByAdminDescRequest)(nil),        // 20: key.GetAllKeysByAdminDescRequest
	(*GetAllKeysByAdminDescResponse)(nil),       // 21: key.GetAllKeysByAdminDescResponse
	(*AlterKeyValidInfoByAdminRequest)(nil),     // 22: key.AlterKeyValidInfoByAdminRequest
	(*AlterKeyValidInfoByAdminResponse)(nil),    // 23: key.AlterKeyValidInfoByAdminResponse
}
var file_key_proto_depIdxs = []int32{
	0,  // 0: key.KeyService.GetAllMyKeysByUserIdAsc:input_type -> key.GetAllMyKeysByUserIdAscRequest
	2,  // 1: key.KeyService.GetKeyInfoById:input_type -> key.GetKeyInfoByIdRequest
	4,  // 2: key.KeyService.RegisterClientWithKey:input_type -> key.RegisterClientWithKeyRequest
	6,  // 3: key.KeyService.CancelRegisterClientWithKey:input_type -> key.CancelRegisterClientWithKeyRequest
	8,  // 4: key.KeyService.BindOrActiveMyKey2App:input_type -> key.BindOrActiveMyKey2AppRequest
	10, // 5: key.KeyService.UnbindKey:input_type -> key.UnbindKeyRequest
	18, // 6: key.KeyService.AlterKeyBindRemark:input_type -> key.AlterKeyBindRemarkRequest
	12, // 7: key.KeyService.CheckAccountAndKeyUsability:input_type -> key.CheckAccountAndKeyUsabilityRequest
	14, // 8: key.KeyService.GetActivateLogByUserId:input_type -> key.GetActivateLogByUserIdRequest
	16, // 9: key.KeyService.GetActivateLogByAdmin:input_type -> key.GetActivateLogByAdminRequest
	22, // 10: key.KeyService.AlterKeyValidInfoByAdmin:input_type -> key.AlterKeyValidInfoByAdminRequest
	20, // 11: key.KeyService.GetAllKeysByAdminDesc:input_type -> key.GetAllKeysByAdminDescRequest
	1,  // 12: key.KeyService.GetAllMyKeysByUserIdAsc:output_type -> key.GetAllMyKeysByUserIdAscResponse
	3,  // 13: key.KeyService.GetKeyInfoById:output_type -> key.GetKeyInfoByIdResponse
	5,  // 14: key.KeyService.RegisterClientWithKey:output_type -> key.RegisterClientWithKeyResponse
	7,  // 15: key.KeyService.CancelRegisterClientWithKey:output_type -> key.CancelRegisterClientWithKeyResponse
	9,  // 16: key.KeyService.BindOrActiveMyKey2App:output_type -> key.BindOrActiveMyKey2AppResponse
	11, // 17: key.KeyService.UnbindKey:output_type -> key.UnbindKeyResponse
	19, // 18: key.KeyService.AlterKeyBindRemark:output_type -> key.AlterKeyBindRemarkResponse
	13, // 19: key.KeyService.CheckAccountAndKeyUsability:output_type -> key.CheckAccountAndKeyUsabilityResponse
	15, // 20: key.KeyService.GetActivateLogByUserId:output_type -> key.GetActivateLogByUserIdResponse
	17, // 21: key.KeyService.GetActivateLogByAdmin:output_type -> key.GetActivateLogByAdminResponse
	23, // 22: key.KeyService.AlterKeyValidInfoByAdmin:output_type -> key.AlterKeyValidInfoByAdminResponse
	21, // 23: key.KeyService.GetAllKeysByAdminDesc:output_type -> key.GetAllKeysByAdminDescResponse
	12, // [12:24] is the sub-list for method output_type
	0,  // [0:12] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_key_proto_init() }
func file_key_proto_init() {
	if File_key_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_key_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_key_proto_goTypes,
		DependencyIndexes: file_key_proto_depIdxs,
		MessageInfos:      file_key_proto_msgTypes,
	}.Build()
	File_key_proto = out.File
	file_key_proto_rawDesc = nil
	file_key_proto_goTypes = nil
	file_key_proto_depIdxs = nil
}
